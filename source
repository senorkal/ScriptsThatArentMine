--//
local runsrv = game:GetService('RunService')
local uis = game:GetService('UserInputService')
local gui = game:GetService('StarterGui')
local fag = game.Players.LocalPlayer
local char = fag.Character
local hum = char.Humanoid
local mouse = fag:GetMouse()
local cam = workspace.CurrentCamera
local funcs = {}
local vt3 = Vector3.new
local cf = CFrame.new

local folderName = 'reanimFolder'
local reanimName = 'reanim'

if char:FindFirstChild('reanimFolder') then
	_G.reanimated = false
	char:FindFirstChild('reanimFolder'):Destroy()
	for _,v in next, char:GetDescendants() do
		if v:IsA('BasePart') then v.Anchored = true end
	end
	local humC = hum:Clone()
	hum:Destroy()
	humC.Parent = char
return end

_G.reanimated = true

function addfunc(func)
	table.insert(funcs, func)
end

function notif(title, txt, dur)
	gui:SetCore('SendNotification', {
		Title = title,
		Text = txt,
		Duration = dur or 3,
	})
end
--//
for _, v in next, char:GetDescendants() do
	if v:IsA('BasePart') then
		addfunc(runsrv.Heartbeat:Connect(function()
			pcall(function()
				v.Velocity = vt3(0,-30,0)
				sethiddenproperty(fag,'MaximumSimulationRadius',math.huge)
				sethiddenproperty(fag,'SimulationRadius',999999999)
				fag.ReplicationFocus = workspace
			end)
		end))
	end
end
--//
local folder = Instance.new('Folder', char)
folder.Name = folderName

char.Archivable = true
local reanim = char:Clone()
reanim.Name = reanimName

for _, v in next, reanim:GetDescendants() do
	if v:IsA('BasePart') or v:IsA('Decal') then v.Transparency = 1  end
end

fag.Character = nil
fag.Character = char
hum.AutoRotate = false
hum.WalkSpeed = 0
hum.JumpPower = 0
hum:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
hum.BreakJointsOnDeath = false
notif('Reanimation enabled', 'Reanimated.')
hum.Health = 0
char.Animate.Disabled = true
reanim.Animate.Disabled = true
reanim.Parent = folder
reanim.HumanoidRootPart.CFrame = char.HumanoidRootPart.CFrame*CFrame.new(0,5,0)

function create(part, par, pos, rot)
	Instance.new('Attachment',part)
	Instance.new('AlignPosition',part)
	Instance.new('AlignOrientation',part)
	Instance.new('Attachment',par)
	part.Attachment.Name = part.Name
	par.Attachment.Name = part.Name
	part.AlignPosition.Attachment0 = part[part.Name]
	part.AlignOrientation.Attachment0 = part[part.Name]
	part.AlignPosition.Attachment1 = par[part.Name]
	part.AlignOrientation.Attachment1 = par[part.Name]
	par[part.Name].Position = pos or vt3()
	part[part.Name].Orientation = rot or vt3()
	part.AlignPosition.MaxForce = 999999999
	part.AlignPosition.MaxVelocity = math.huge
	part.AlignPosition.ReactionForceEnabled = false
	part.AlignPosition.Responsiveness = math.huge
	part.AlignOrientation.Responsiveness = math.huge
	part.AlignPosition.RigidityEnabled = false
	part.AlignOrientation.MaxTorque = 999999999
	part.Massless=true
end

function setpos(part, par, pos)
	Instance.new('Attachment',part)
	Instance.new('AlignPosition',part)
	Instance.new('Attachment',par)
	part.Attachment.Name = part.Name
	par.Attachment.Name = part.Name
	part.AlignPosition.Attachment0 = part[part.Name]
	part.AlignPosition.Attachment1 = par[part.Name]
	par[part.Name].Position = pos or vt3()
	part.AlignPosition.MaxForce = 999999999
	part.AlignPosition.MaxVelocity = math.huge
	part.AlignPosition.ReactionForceEnabled = false
	part.AlignPosition.Responsiveness = math.huge
	part.Massless=true
end

for _, v in next, char:GetDescendants() do
	if v:IsA('BasePart') then
		addfunc(runsrv.Stepped:Connect(function()
			v.CanCollide = false
		end))
	end
end

for _, v in next, char:GetDescendants() do
	if v:IsA('Accessory') then	
		create(v.Handle, reanim[v.Name].Handle)
	end
end

create(char['Head'],reanim['Head'])
create(char['Torso'],reanim['Torso'])
setpos(char['HumanoidRootPart'],reanim['Torso'],vt3(0,0,0))
create(char['Right Arm'],reanim['Right Arm'])
create(char['Left Arm'],reanim['Left Arm'])
create(char['Right Leg'],reanim['Right Leg'])
create(char['Left Leg'],reanim['Left Leg'])

addfunc(uis.JumpRequest:Connect(function()
    if reanim.Humanoid.FloorMaterial ~= Enum.Material.Air then 
        reanim.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        reanim.Humanoid.Sit = false 
    end 
end))

addfunc(runsrv.RenderStepped:Connect(function()
    reanim.Humanoid:Move(hum.MoveDirection,false)
	for _,v in next, hum:GetPlayingAnimationTracks() do v:Stop() end
end))

cam.CameraSubject = reanim.Humanoid

local reset = Instance.new('BindableEvent')
addfunc(reset.Event:Connect(function()
	reanim:Destroy()
	_G.reanimated = false
	for _,v in next, char:GetDescendants() do
		if v:IsA('BasePart') then v.Anchored = true end
	end
	hum:SetStateEnabled(Enum.HumanoidStateType.Dead, true)
	hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, true)
	hum.BreakJointsOnDeath = true
	local humC = hum:Clone()
	hum:Destroy()
	humC.Parent = char
	for _, v in pairs(funcs) do v:Disconnect() end
	gui:SetCore('ResetButtonCallback', true)
	reset:Remove()
end))

gui:SetCore('ResetButtonCallback', reset)
